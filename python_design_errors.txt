* Strings should
    * Inherit from Sized, Container[str] instead of Sequence[str], and
    * Expose chars(self) -> Sequence[str].
    * See: https://discuss.python.org/t/an-interesting-pytype-experiment-and-a-possible-extension-to-strings/23749/1

* There should be no __lt__, etc. methods.  Instead, these should be global functions with multiple
  dispatch.  Classes can register their dispatches.
    * See: https://colab.research.google.com/drive/1-HQa5GOmV-uhTbv6EgnMfJYVgwuYMIrQ

* Dataclasses should have been declared using a base class rather than a decorator.
    * This would fix incompatibility with multiple inheritance and dataclasses.

* The sequence protocol should be removed.
    * See: https://discuss.python.org/t/deprecate-old-style-iteration-protocol/17863

* The export mechanism should be simpler.  Perhaps, an export command that populates __all__ and
  imports symbols.

* All classes should be dataclasses.  That would ensure that members are all declared at the class
  level.  It would also prevent odd creation or deletion of object members in various methods.

* The __getitem__ function should have accepted its parameters as positional arguments:
      def __getitem__(self, *args: Any) -> Any
  rather than as a tuple.  This would distinguish x[some_tuple] from x[a, b, c].  It would also make
  x[] meaningful rather than forcing the weird x[()].

* Classes should have true constructors: https://discuss.python.org/t/true-constructors/80124
